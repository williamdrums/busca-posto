import { OnChanges, OnInit, EventEmitter, OnDestroy } from '@angular/core';
import { GoogleMapsAPIWrapper } from '@agm/core';
import { InfoWindow } from '@agm/core/services/google-maps-types';
import * as ɵngcc0 from '@angular/core';
export declare class AgmDirection implements OnChanges, OnInit, OnDestroy {
    private gmapsApi;
    origin: any;
    destination: any;
    travelMode: String;
    transitOptions: any;
    drivingOptions: any;
    waypoints: any;
    optimizeWaypoints: Boolean;
    provideRouteAlternatives: Boolean;
    avoidHighways: Boolean;
    avoidTolls: Boolean;
    renderOptions: any;
    panel: object | undefined;
    markerOptions: {
        origin: any;
        destination: any;
        waypoints: any;
    };
    infoWindow: InfoWindow;
    visible: Boolean;
    renderRoute: any;
    onChange: EventEmitter<any>;
    onResponse: EventEmitter<any>;
    sendInfoWindow: EventEmitter<InfoWindow>;
    status: EventEmitter<string>;
    originDrag: EventEmitter<any>;
    destinationDrag: EventEmitter<any>;
    directionsService: any;
    directionsDisplay: any;
    private originMarker;
    private destinationMarker;
    private waypointsMarker;
    private isFirstChange;
    constructor(gmapsApi: GoogleMapsAPIWrapper);
    ngOnInit(): void;
    ngOnChanges(obj: any): void;
    ngOnDestroy(): void;
    /**
     * This event is fired when the user creating or updating this direction
     */
    private directionDraw;
    /**
     * Custom Origin and Destination Icon
     * @param map map
     * @param marker marker
     * @param markerOpts properties
     * @param content marker's infowindow content
     * @returns new marker
     * @memberof AgmDirection
     */
    private setMarker;
    /**
     * This event is fired when remove markers
     */
    private removeMarkers;
    /**
     * This event is fired when remove directions
     */
    private removeDirections;
    /**
     * This event is fired when destroy markers
     */
    private destroyMarkers;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AgmDirection>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AgmDirection, "agm-direction", never, {
    "travelMode": "travelMode";
    "transitOptions": "transitOptions";
    "drivingOptions": "drivingOptions";
    "waypoints": "waypoints";
    "optimizeWaypoints": "optimizeWaypoints";
    "provideRouteAlternatives": "provideRouteAlternatives";
    "avoidHighways": "avoidHighways";
    "avoidTolls": "avoidTolls";
    "visible": "visible";
    "renderRoute": "renderRoute";
    "origin": "origin";
    "destination": "destination";
    "infoWindow": "infoWindow";
    "renderOptions": "renderOptions";
    "panel": "panel";
    "markerOptions": "markerOptions";
}, {
    "onChange": "onChange";
    "onResponse": "onResponse";
    "sendInfoWindow": "sendInfoWindow";
    "status": "status";
    "originDrag": "originDrag";
    "destinationDrag": "destinationDrag";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdtLWRpcmVjdGlvbi5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiYWdtLWRpcmVjdGlvbi5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkNoYW5nZXMsIE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdvb2dsZU1hcHNBUElXcmFwcGVyIH0gZnJvbSAnQGFnbS9jb3JlJztcbmltcG9ydCB7IEluZm9XaW5kb3cgfSBmcm9tICdAYWdtL2NvcmUvc2VydmljZXMvZ29vZ2xlLW1hcHMtdHlwZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQWdtRGlyZWN0aW9uIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBnbWFwc0FwaTtcbiAgICBvcmlnaW46IGFueTtcbiAgICBkZXN0aW5hdGlvbjogYW55O1xuICAgIHRyYXZlbE1vZGU6IFN0cmluZztcbiAgICB0cmFuc2l0T3B0aW9uczogYW55O1xuICAgIGRyaXZpbmdPcHRpb25zOiBhbnk7XG4gICAgd2F5cG9pbnRzOiBhbnk7XG4gICAgb3B0aW1pemVXYXlwb2ludHM6IEJvb2xlYW47XG4gICAgcHJvdmlkZVJvdXRlQWx0ZXJuYXRpdmVzOiBCb29sZWFuO1xuICAgIGF2b2lkSGlnaHdheXM6IEJvb2xlYW47XG4gICAgYXZvaWRUb2xsczogQm9vbGVhbjtcbiAgICByZW5kZXJPcHRpb25zOiBhbnk7XG4gICAgcGFuZWw6IG9iamVjdCB8IHVuZGVmaW5lZDtcbiAgICBtYXJrZXJPcHRpb25zOiB7XG4gICAgICAgIG9yaWdpbjogYW55O1xuICAgICAgICBkZXN0aW5hdGlvbjogYW55O1xuICAgICAgICB3YXlwb2ludHM6IGFueTtcbiAgICB9O1xuICAgIGluZm9XaW5kb3c6IEluZm9XaW5kb3c7XG4gICAgdmlzaWJsZTogQm9vbGVhbjtcbiAgICByZW5kZXJSb3V0ZTogYW55O1xuICAgIG9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvblJlc3BvbnNlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBzZW5kSW5mb1dpbmRvdzogRXZlbnRFbWl0dGVyPEluZm9XaW5kb3c+O1xuICAgIHN0YXR1czogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgb3JpZ2luRHJhZzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZGVzdGluYXRpb25EcmFnOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBkaXJlY3Rpb25zU2VydmljZTogYW55O1xuICAgIGRpcmVjdGlvbnNEaXNwbGF5OiBhbnk7XG4gICAgcHJpdmF0ZSBvcmlnaW5NYXJrZXI7XG4gICAgcHJpdmF0ZSBkZXN0aW5hdGlvbk1hcmtlcjtcbiAgICBwcml2YXRlIHdheXBvaW50c01hcmtlcjtcbiAgICBwcml2YXRlIGlzRmlyc3RDaGFuZ2U7XG4gICAgY29uc3RydWN0b3IoZ21hcHNBcGk6IEdvb2dsZU1hcHNBUElXcmFwcGVyKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKG9iajogYW55KTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgdXNlciBjcmVhdGluZyBvciB1cGRhdGluZyB0aGlzIGRpcmVjdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgZGlyZWN0aW9uRHJhdztcbiAgICAvKipcbiAgICAgKiBDdXN0b20gT3JpZ2luIGFuZCBEZXN0aW5hdGlvbiBJY29uXG4gICAgICogQHBhcmFtIG1hcCBtYXBcbiAgICAgKiBAcGFyYW0gbWFya2VyIG1hcmtlclxuICAgICAqIEBwYXJhbSBtYXJrZXJPcHRzIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0gY29udGVudCBtYXJrZXIncyBpbmZvd2luZG93IGNvbnRlbnRcbiAgICAgKiBAcmV0dXJucyBuZXcgbWFya2VyXG4gICAgICogQG1lbWJlcm9mIEFnbURpcmVjdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0TWFya2VyO1xuICAgIC8qKlxuICAgICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgd2hlbiByZW1vdmUgbWFya2Vyc1xuICAgICAqL1xuICAgIHByaXZhdGUgcmVtb3ZlTWFya2VycztcbiAgICAvKipcbiAgICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gcmVtb3ZlIGRpcmVjdGlvbnNcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlbW92ZURpcmVjdGlvbnM7XG4gICAgLyoqXG4gICAgICogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIGRlc3Ryb3kgbWFya2Vyc1xuICAgICAqL1xuICAgIHByaXZhdGUgZGVzdHJveU1hcmtlcnM7XG59XG4iXX0=