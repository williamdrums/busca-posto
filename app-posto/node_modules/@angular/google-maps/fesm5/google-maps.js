import { __values, __read, __assign } from 'tslib';
import { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Input, Output, Directive, NgModule } from '@angular/core';
import { BehaviorSubject, Subject, combineLatest } from 'rxjs';
import { map, take, shareReplay, takeUntil } from 'rxjs/operators';

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** default options set to the Googleplex */
var DEFAULT_OPTIONS = {
    center: { lat: 37.421995, lng: -122.084092 },
    zoom: 17,
};
/** Arbitrary default height for the map element */
var DEFAULT_HEIGHT = '500px';
/** Arbitrary default width for the map element */
var DEFAULT_WIDTH = '500px';
/**
 * Angular component that renders a Google Map via the Google Maps JavaScript
 * API.
 * @see https://developers.google.com/maps/documentation/javascript/reference/
 */
var GoogleMap = /** @class */ (function () {
    function GoogleMap(_elementRef) {
        this._elementRef = _elementRef;
        this.height = DEFAULT_HEIGHT;
        this.width = DEFAULT_WIDTH;
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed
         */
        this.boundsChanged = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed
         */
        this.centerChanged = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click
         */
        this.mapClick = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick
         */
        this.mapDblclick = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag
         */
        this.mapDrag = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend
         */
        this.mapDragend = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart
         */
        this.mapDragstart = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed
         */
        this.headingChanged = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle
         */
        this.idle = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed
         */
        this.maptypeidChanged = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove
         */
        this.mapMousemove = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout
         */
        this.mapMouseout = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover
         */
        this.mapMouseover = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed
         */
        this.projectionChanged = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick
         */
        this.mapRightclick = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded
         */
        this.tilesloaded = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed
         */
        this.tiltChanged = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed
         */
        this.zoomChanged = new EventEmitter();
        this._listeners = [];
        this._options = new BehaviorSubject(DEFAULT_OPTIONS);
        this._center = new BehaviorSubject(undefined);
        this._zoom = new BehaviorSubject(undefined);
        this._destroy = new Subject();
        var googleMapsWindow = window;
        if (!googleMapsWindow.google) {
            throw Error('Namespace google not found, cannot construct embedded google ' +
                'map. Please install the Google Maps JavaScript API: ' +
                'https://developers.google.com/maps/documentation/javascript/' +
                'tutorial#Loading_the_Maps_API');
        }
    }
    Object.defineProperty(GoogleMap.prototype, "center", {
        set: function (center) {
            this._center.next(center);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMap.prototype, "zoom", {
        set: function (zoom) {
            this._zoom.next(zoom);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMap.prototype, "options", {
        set: function (options) {
            this._options.next(options || DEFAULT_OPTIONS);
        },
        enumerable: true,
        configurable: true
    });
    GoogleMap.prototype.ngOnChanges = function () {
        this._setSize();
    };
    GoogleMap.prototype.ngOnInit = function () {
        var _this = this;
        this._mapEl = this._elementRef.nativeElement.querySelector('.map-container');
        this._setSize();
        var combinedOptionsChanges = this._combineOptions();
        this._googleMapChanges = this._initializeMap(combinedOptionsChanges);
        this._googleMapChanges.subscribe(function (googleMap) {
            _this._googleMap = googleMap;
            _this._initializeEventHandlers();
        });
        this._watchForOptionsChanges();
        this._watchForCenterChanges();
        this._watchForZoomChanges();
    };
    GoogleMap.prototype.ngOnDestroy = function () {
        var e_1, _a;
        this._destroy.next();
        this._destroy.complete();
        try {
            for (var _b = __values(this._listeners), _c = _b.next(); !_c.done; _c = _b.next()) {
                var listener = _c.value;
                listener.remove();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.fitBounds
     */
    GoogleMap.prototype.fitBounds = function (bounds, padding) {
        this._googleMap.fitBounds(bounds, padding);
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panBy
     */
    GoogleMap.prototype.panBy = function (x, y) {
        this._googleMap.panBy(x, y);
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panTo
     */
    GoogleMap.prototype.panTo = function (latLng) {
        this._googleMap.panTo(latLng);
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panToBounds
     */
    GoogleMap.prototype.panToBounds = function (latLngBounds, padding) {
        this._googleMap.panToBounds(latLngBounds, padding);
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds
     */
    GoogleMap.prototype.getBounds = function () {
        return this._googleMap.getBounds() || null;
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getCenter
     */
    GoogleMap.prototype.getCenter = function () {
        return this._googleMap.getCenter();
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getClickableIcons
     */
    GoogleMap.prototype.getClickableIcons = function () {
        return this._googleMap.getClickableIcons();
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getHeading
     */
    GoogleMap.prototype.getHeading = function () {
        return this._googleMap.getHeading();
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getMapTypeId
     */
    GoogleMap.prototype.getMapTypeId = function () {
        return this._googleMap.getMapTypeId();
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getProjection
     */
    GoogleMap.prototype.getProjection = function () {
        return this._googleMap.getProjection();
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getStreetView
     */
    GoogleMap.prototype.getStreetView = function () {
        return this._googleMap.getStreetView();
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getTilt
     */
    GoogleMap.prototype.getTilt = function () {
        return this._googleMap.getTilt();
    };
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getZoom
     */
    GoogleMap.prototype.getZoom = function () {
        return this._googleMap.getZoom();
    };
    Object.defineProperty(GoogleMap.prototype, "controls", {
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.controls
         */
        get: function () {
            return this._googleMap.controls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMap.prototype, "data", {
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.data
         */
        get: function () {
            return this._googleMap.data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMap.prototype, "mapTypes", {
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mapTypes
         */
        get: function () {
            return this._googleMap.mapTypes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMap.prototype, "overlayMapTypes", {
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.overlayMapTypes
         */
        get: function () {
            return this._googleMap.overlayMapTypes;
        },
        enumerable: true,
        configurable: true
    });
    GoogleMap.prototype._setSize = function () {
        if (this._mapEl) {
            this._mapEl.style.height = this.height || DEFAULT_HEIGHT;
            this._mapEl.style.width = this.width || DEFAULT_WIDTH;
        }
    };
    /** Combines the center and zoom and the other map options into a single object */
    GoogleMap.prototype._combineOptions = function () {
        return combineLatest([this._options, this._center, this._zoom])
            .pipe(map(function (_a) {
            var _b = __read(_a, 3), options = _b[0], center = _b[1], zoom = _b[2];
            var combinedOptions = __assign(__assign({}, options), { center: center || options.center, zoom: zoom !== undefined ? zoom : options.zoom });
            return combinedOptions;
        }));
    };
    GoogleMap.prototype._initializeMap = function (optionsChanges) {
        var _this = this;
        return optionsChanges.pipe(take(1), map(function (options) {
            return new google.maps.Map(_this._mapEl, options);
        }), shareReplay(1));
    };
    GoogleMap.prototype._watchForOptionsChanges = function () {
        combineLatest([this._googleMapChanges, this._options])
            .pipe(takeUntil(this._destroy))
            .subscribe(function (_a) {
            var _b = __read(_a, 2), googleMap = _b[0], options = _b[1];
            googleMap.setOptions(options);
        });
    };
    GoogleMap.prototype._watchForCenterChanges = function () {
        combineLatest([this._googleMapChanges, this._center])
            .pipe(takeUntil(this._destroy))
            .subscribe(function (_a) {
            var _b = __read(_a, 2), googleMap = _b[0], center = _b[1];
            if (center) {
                googleMap.setCenter(center);
            }
        });
    };
    GoogleMap.prototype._watchForZoomChanges = function () {
        combineLatest([this._googleMapChanges, this._zoom])
            .pipe(takeUntil(this._destroy))
            .subscribe(function (_a) {
            var _b = __read(_a, 2), googleMap = _b[0], zoom = _b[1];
            if (zoom !== undefined) {
                googleMap.setZoom(zoom);
            }
        });
    };
    GoogleMap.prototype._initializeEventHandlers = function () {
        var _this = this;
        var eventHandlers = new Map([
            ['bounds_changed', this.boundsChanged],
            ['center_changed', this.centerChanged],
            ['drag', this.mapDrag],
            ['dragend', this.mapDragend],
            ['dragstart', this.mapDragstart],
            ['heading_changed', this.headingChanged],
            ['idle', this.idle],
            ['maptypeid_changed', this.maptypeidChanged],
            ['projection_changed', this.projectionChanged],
            ['tilesloaded', this.tilesloaded],
            ['tilt_changed', this.tiltChanged],
            ['zoomChanged', this.zoomChanged],
        ]);
        var mouseEventHandlers = new Map([
            ['dblclick', this.mapDblclick],
            ['mousemove', this.mapMousemove],
            ['mouseout', this.mapMouseout],
            ['mouseover', this.mapMouseover],
            ['rightclick', this.mapRightclick],
        ]);
        eventHandlers.forEach(function (eventHandler, name) {
            if (eventHandler.observers.length > 0) {
                _this._listeners.push(_this._googleMap.addListener(name, function () {
                    eventHandler.emit();
                }));
            }
        });
        mouseEventHandlers.forEach(function (eventHandler, name) {
            if (eventHandler.observers.length > 0) {
                _this._listeners.push(_this._googleMap.addListener(name, function (event) {
                    eventHandler.emit(event);
                }));
            }
        });
        if (this.mapClick.observers.length > 0) {
            this._listeners.push(this._googleMap.addListener('click', function (event) {
                _this.mapClick.emit(event);
            }));
        }
    };
    GoogleMap.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'google-map',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: '<div class="map-container"></div><ng-content></ng-content>',
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    GoogleMap.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    GoogleMap.propDecorators = {
        height: [{ type: Input }],
        width: [{ type: Input }],
        center: [{ type: Input }],
        zoom: [{ type: Input }],
        options: [{ type: Input }],
        boundsChanged: [{ type: Output }],
        centerChanged: [{ type: Output }],
        mapClick: [{ type: Output }],
        mapDblclick: [{ type: Output }],
        mapDrag: [{ type: Output }],
        mapDragend: [{ type: Output }],
        mapDragstart: [{ type: Output }],
        headingChanged: [{ type: Output }],
        idle: [{ type: Output }],
        maptypeidChanged: [{ type: Output }],
        mapMousemove: [{ type: Output }],
        mapMouseout: [{ type: Output }],
        mapMouseover: [{ type: Output }],
        projectionChanged: [{ type: Output }],
        mapRightclick: [{ type: Output }],
        tilesloaded: [{ type: Output }],
        tiltChanged: [{ type: Output }],
        zoomChanged: [{ type: Output }]
    };
    return GoogleMap;
}());

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Default options for the Google Maps marker component. Displays a marker
 * at the Googleplex.
 */
var DEFAULT_MARKER_OPTIONS = {
    position: { lat: 37.421995, lng: -122.084092 },
};
/**
 * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.
 * @see developers.google.com/maps/documentation/javascript/reference/marker
 */
var MapMarker = /** @class */ (function () {
    function MapMarker(googleMap) {
        this.googleMap = googleMap;
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed
         */
        this.animationChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click
         */
        this.mapClick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed
         */
        this.clickableChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed
         */
        this.cursorChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick
         */
        this.mapDblclick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag
         */
        this.mapDrag = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend
         */
        this.mapDragend = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed
         */
        this.draggableChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart
         */
        this.mapDragstart = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed
         */
        this.flatChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed
         */
        this.iconChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown
         */
        this.mapMousedown = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout
         */
        this.mapMouseout = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover
         */
        this.mapMouseover = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup
         */
        this.mapMouseup = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed
         */
        this.positionChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick
         */
        this.mapRightclick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed
         */
        this.shapeChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed
         */
        this.titleChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed
         */
        this.visibleChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed
         */
        this.zindexChanged = new EventEmitter();
        this._options = new BehaviorSubject(DEFAULT_MARKER_OPTIONS);
        this._title = new BehaviorSubject(undefined);
        this._position = new BehaviorSubject(undefined);
        this._label = new BehaviorSubject(undefined);
        this._clickable = new BehaviorSubject(undefined);
        this._destroy = new Subject();
        this._listeners = [];
    }
    Object.defineProperty(MapMarker.prototype, "options", {
        set: function (options) {
            this._options.next(options || DEFAULT_MARKER_OPTIONS);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapMarker.prototype, "title", {
        set: function (title) {
            this._title.next(title);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapMarker.prototype, "position", {
        set: function (position) {
            this._position.next(position);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapMarker.prototype, "label", {
        set: function (label) {
            this._label.next(label);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapMarker.prototype, "clickable", {
        set: function (clickable) {
            this._clickable.next(clickable);
        },
        enumerable: true,
        configurable: true
    });
    MapMarker.prototype.ngOnInit = function () {
        var _this = this;
        var combinedOptionsChanges = this._combineOptions();
        combinedOptionsChanges.pipe(take(1)).subscribe(function (options) {
            _this._marker = new google.maps.Marker(options);
            _this._marker.setMap(_this.googleMap._googleMap);
            _this._initializeEventHandlers();
        });
        this._watchForOptionsChanges();
        this._watchForTitleChanges();
        this._watchForPositionChanges();
        this._watchForLabelChanges();
        this._watchForClickableChanges();
    };
    MapMarker.prototype.ngOnDestroy = function () {
        var e_1, _a;
        this._destroy.next();
        this._destroy.complete();
        try {
            for (var _b = __values(this._listeners), _c = _b.next(); !_c.done; _c = _b.next()) {
                var listener = _c.value;
                listener.remove();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (this._marker) {
            this._marker.setMap(null);
        }
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation
     */
    MapMarker.prototype.getAnimation = function () {
        return this._marker.getAnimation() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable
     */
    MapMarker.prototype.getClickable = function () {
        return this._marker.getClickable();
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor
     */
    MapMarker.prototype.getCursor = function () {
        return this._marker.getCursor() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable
     */
    MapMarker.prototype.getDraggable = function () {
        return !!this._marker.getDraggable();
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon
     */
    MapMarker.prototype.getIcon = function () {
        return this._marker.getIcon() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel
     */
    MapMarker.prototype.getLabel = function () {
        return this._marker.getLabel() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity
     */
    MapMarker.prototype.getOpacity = function () {
        return this._marker.getOpacity() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition
     */
    MapMarker.prototype.getPosition = function () {
        return this._marker.getPosition() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape
     */
    MapMarker.prototype.getShape = function () {
        return this._marker.getShape() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle
     */
    MapMarker.prototype.getTitle = function () {
        return this._marker.getTitle() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible
     */
    MapMarker.prototype.getVisible = function () {
        return this._marker.getVisible();
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex
     */
    MapMarker.prototype.getZIndex = function () {
        return this._marker.getZIndex() || null;
    };
    MapMarker.prototype._combineOptions = function () {
        var _this = this;
        return combineLatest([this._options, this._title, this._position, this._label, this._clickable])
            .pipe(map(function (_a) {
            var _b = __read(_a, 5), options = _b[0], title = _b[1], position = _b[2], label = _b[3], clickable = _b[4];
            var combinedOptions = __assign(__assign({}, options), { title: title || options.title, position: position || options.position, label: label || options.label, clickable: clickable !== undefined ? clickable : options.clickable, map: _this.googleMap._googleMap || null });
            return combinedOptions;
        }));
    };
    MapMarker.prototype._watchForOptionsChanges = function () {
        var _this = this;
        this._options.pipe(takeUntil(this._destroy)).subscribe(function (options) {
            if (_this._marker) {
                _this._marker.setOptions(options);
            }
        });
    };
    MapMarker.prototype._watchForTitleChanges = function () {
        var _this = this;
        this._title.pipe(takeUntil(this._destroy)).subscribe(function (title) {
            if (_this._marker && title !== undefined) {
                _this._marker.setTitle(title);
            }
        });
    };
    MapMarker.prototype._watchForPositionChanges = function () {
        var _this = this;
        this._position.pipe(takeUntil(this._destroy)).subscribe(function (position) {
            if (_this._marker && position) {
                _this._marker.setPosition(position);
            }
        });
    };
    MapMarker.prototype._watchForLabelChanges = function () {
        var _this = this;
        this._label.pipe(takeUntil(this._destroy)).subscribe(function (label) {
            if (_this._marker && label !== undefined) {
                _this._marker.setLabel(label);
            }
        });
    };
    MapMarker.prototype._watchForClickableChanges = function () {
        var _this = this;
        this._clickable.pipe(takeUntil(this._destroy)).subscribe(function (clickable) {
            if (_this._marker && clickable !== undefined) {
                _this._marker.setClickable(clickable);
            }
        });
    };
    MapMarker.prototype._initializeEventHandlers = function () {
        var _this = this;
        var eventHandlers = new Map([
            ['animation_changed', this.animationChanged],
            ['clickable_changed', this.clickableChanged],
            ['cursor_changed', this.cursorChanged],
            ['draggable_changed', this.draggableChanged],
            ['flat_changed', this.flatChanged],
            ['icon_changed', this.iconChanged],
            ['position_changed', this.positionChanged],
            ['shape_changed', this.shapeChanged],
            ['title_changed', this.titleChanged],
            ['visible_changed', this.visibleChanged],
            ['zindex_changed', this.zindexChanged],
        ]);
        var mouseEventHandlers = new Map([
            ['click', this.mapClick],
            ['dblclick', this.mapDblclick],
            ['drag', this.mapDrag],
            ['dragend', this.mapDragend],
            ['dragstart', this.mapDragstart],
            ['mousedown', this.mapMousedown],
            ['mouseout', this.mapMouseout],
            ['mouseover', this.mapMouseover],
            ['mouseup', this.mapMouseup],
            ['rightclick', this.mapRightclick],
        ]);
        eventHandlers.forEach(function (eventHandler, name) {
            if (eventHandler.observers.length > 0) {
                _this._listeners.push(_this._marker.addListener(name, function () {
                    eventHandler.emit();
                }));
            }
        });
        mouseEventHandlers.forEach(function (eventHandler, name) {
            if (eventHandler.observers.length > 0) {
                _this._listeners.push(_this._marker.addListener(name, function (event) {
                    eventHandler.emit(event);
                }));
            }
        });
    };
    MapMarker.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'map-marker',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    MapMarker.ctorParameters = function () { return [
        { type: GoogleMap }
    ]; };
    MapMarker.propDecorators = {
        options: [{ type: Input }],
        title: [{ type: Input }],
        position: [{ type: Input }],
        label: [{ type: Input }],
        clickable: [{ type: Input }],
        animationChanged: [{ type: Output }],
        mapClick: [{ type: Output }],
        clickableChanged: [{ type: Output }],
        cursorChanged: [{ type: Output }],
        mapDblclick: [{ type: Output }],
        mapDrag: [{ type: Output }],
        mapDragend: [{ type: Output }],
        draggableChanged: [{ type: Output }],
        mapDragstart: [{ type: Output }],
        flatChanged: [{ type: Output }],
        iconChanged: [{ type: Output }],
        mapMousedown: [{ type: Output }],
        mapMouseout: [{ type: Output }],
        mapMouseover: [{ type: Output }],
        mapMouseup: [{ type: Output }],
        positionChanged: [{ type: Output }],
        mapRightclick: [{ type: Output }],
        shapeChanged: [{ type: Output }],
        titleChanged: [{ type: Output }],
        visibleChanged: [{ type: Output }],
        zindexChanged: [{ type: Output }]
    };
    return MapMarker;
}());

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Angular component that renders a Google Maps info window via the Google Maps JavaScript API.
 * @see developers.google.com/maps/documentation/javascript/reference/info-window
 */
var MapInfoWindow = /** @class */ (function () {
    function MapInfoWindow(googleMap, _elementRef) {
        this.googleMap = googleMap;
        this._elementRef = _elementRef;
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick
         */
        this.closeclick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window
         * #InfoWindow.content_changed
         */
        this.contentChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready
         */
        this.domready = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window
         * #InfoWindow.position_changed
         */
        this.positionChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window
         * #InfoWindow.zindex_changed
         */
        this.zindexChanged = new EventEmitter();
        this._options = new BehaviorSubject({});
        this._position = new BehaviorSubject(undefined);
        this._listeners = [];
        this._destroy = new Subject();
    }
    Object.defineProperty(MapInfoWindow.prototype, "options", {
        set: function (options) {
            this._options.next(options || {});
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapInfoWindow.prototype, "position", {
        set: function (position) {
            this._position.next(position);
        },
        enumerable: true,
        configurable: true
    });
    MapInfoWindow.prototype.ngOnInit = function () {
        var _this = this;
        this._combineOptions().pipe(takeUntil(this._destroy)).subscribe(function (options) {
            if (_this._infoWindow) {
                _this._infoWindow.setOptions(options);
            }
            else {
                _this._infoWindow = new google.maps.InfoWindow(options);
                _this._initializeEventHandlers();
            }
        });
    };
    MapInfoWindow.prototype.ngOnDestroy = function () {
        var e_1, _a;
        this._destroy.next();
        this._destroy.complete();
        try {
            for (var _b = __values(this._listeners), _c = _b.next(); !_c.done; _c = _b.next()) {
                var listener = _c.value;
                listener.remove();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.close();
    };
    /**
     * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close
     */
    MapInfoWindow.prototype.close = function () {
        if (this._infoWindow) {
            this._infoWindow.close();
        }
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent
     */
    MapInfoWindow.prototype.getContent = function () {
        return this._infoWindow.getContent();
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window
     * #InfoWindow.getPosition
     */
    MapInfoWindow.prototype.getPosition = function () {
        return this._infoWindow.getPosition() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex
     */
    MapInfoWindow.prototype.getZIndex = function () {
        return this._infoWindow.getZIndex();
    };
    /**
     * Opens the MapInfoWindow using the provided MapMarker as the anchor. If the anchor is not set,
     * then the position property of the options input is used instead.
     */
    MapInfoWindow.prototype.open = function (anchor) {
        var marker = anchor ? anchor._marker : undefined;
        if (this.googleMap._googleMap) {
            this._elementRef.nativeElement.style.display = '';
            this._infoWindow.open(this.googleMap._googleMap, marker);
        }
    };
    MapInfoWindow.prototype._combineOptions = function () {
        var _this = this;
        return combineLatest([this._options, this._position]).pipe(map(function (_a) {
            var _b = __read(_a, 2), options = _b[0], position = _b[1];
            var combinedOptions = __assign(__assign({}, options), { position: position || options.position, content: _this._elementRef.nativeElement });
            return combinedOptions;
        }));
    };
    MapInfoWindow.prototype._initializeEventHandlers = function () {
        var _this = this;
        var eventHandlers = new Map([
            ['closeclick', this.closeclick],
            ['content_changed', this.contentChanged],
            ['domready', this.domready],
            ['position_changed', this.positionChanged],
            ['zindex_changed', this.zindexChanged],
        ]);
        eventHandlers.forEach(function (eventHandler, name) {
            if (eventHandler.observers.length > 0) {
                _this._listeners.push(_this._infoWindow.addListener(name, function () {
                    eventHandler.emit();
                }));
            }
        });
    };
    MapInfoWindow.decorators = [
        { type: Directive, args: [{
                    selector: 'map-info-window',
                    host: { 'style': 'display: none' },
                },] }
    ];
    /** @nocollapse */
    MapInfoWindow.ctorParameters = function () { return [
        { type: GoogleMap },
        { type: ElementRef }
    ]; };
    MapInfoWindow.propDecorators = {
        options: [{ type: Input }],
        position: [{ type: Input }],
        closeclick: [{ type: Output }],
        contentChanged: [{ type: Output }],
        domready: [{ type: Output }],
        positionChanged: [{ type: Output }],
        zindexChanged: [{ type: Output }]
    };
    return MapInfoWindow;
}());

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var COMPONENTS = [
    GoogleMap,
    MapInfoWindow,
    MapMarker,
];
var GoogleMapsModule = /** @class */ (function () {
    function GoogleMapsModule() {
    }
    GoogleMapsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: COMPONENTS,
                    exports: COMPONENTS,
                },] }
    ];
    return GoogleMapsModule;
}());

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * Generated bundle index. Do not edit.
 */

export { GoogleMap, MapMarker, GoogleMapsModule, MapInfoWindow };
//# sourceMappingURL=google-maps.js.map
