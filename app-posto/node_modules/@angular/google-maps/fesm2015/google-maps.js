import { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Input, Output, Directive, NgModule } from '@angular/core';
import { BehaviorSubject, Subject, combineLatest } from 'rxjs';
import { map, take, shareReplay, takeUntil } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function GoogleMapsWindow() { }
if (false) {
    /** @type {?|undefined} */
    GoogleMapsWindow.prototype.google;
}
/**
 * Extends the Google Map interface due to the Definitely Typed implementation
 * missing "getClickableIcons".
 * @record
 */
function UpdatedGoogleMap() { }
if (false) {
    /** @type {?} */
    UpdatedGoogleMap.prototype.getClickableIcons;
}
/**
 * default options set to the Googleplex
 * @type {?}
 */
const DEFAULT_OPTIONS = {
    center: { lat: 37.421995, lng: -122.084092 },
    zoom: 17,
};
/**
 * Arbitrary default height for the map element
 * @type {?}
 */
const DEFAULT_HEIGHT = '500px';
/**
 * Arbitrary default width for the map element
 * @type {?}
 */
const DEFAULT_WIDTH = '500px';
/**
 * Angular component that renders a Google Map via the Google Maps JavaScript
 * API.
 * @see https://developers.google.com/maps/documentation/javascript/reference/
 */
class GoogleMap {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this.height = DEFAULT_HEIGHT;
        this.width = DEFAULT_WIDTH;
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed
         */
        this.boundsChanged = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed
         */
        this.centerChanged = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click
         */
        this.mapClick = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick
         */
        this.mapDblclick = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag
         */
        this.mapDrag = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend
         */
        this.mapDragend = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart
         */
        this.mapDragstart = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed
         */
        this.headingChanged = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle
         */
        this.idle = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed
         */
        this.maptypeidChanged = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove
         */
        this.mapMousemove = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout
         */
        this.mapMouseout = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover
         */
        this.mapMouseover = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed
         */
        this.projectionChanged = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick
         */
        this.mapRightclick = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded
         */
        this.tilesloaded = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed
         */
        this.tiltChanged = new EventEmitter();
        /**
         * See
         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed
         */
        this.zoomChanged = new EventEmitter();
        this._listeners = [];
        this._options = new BehaviorSubject(DEFAULT_OPTIONS);
        this._center = new BehaviorSubject(undefined);
        this._zoom = new BehaviorSubject(undefined);
        this._destroy = new Subject();
        /** @type {?} */
        const googleMapsWindow = window;
        if (!googleMapsWindow.google) {
            throw Error('Namespace google not found, cannot construct embedded google ' +
                'map. Please install the Google Maps JavaScript API: ' +
                'https://developers.google.com/maps/documentation/javascript/' +
                'tutorial#Loading_the_Maps_API');
        }
    }
    /**
     * @param {?} center
     * @return {?}
     */
    set center(center) {
        this._center.next(center);
    }
    /**
     * @param {?} zoom
     * @return {?}
     */
    set zoom(zoom) {
        this._zoom.next(zoom);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options.next(options || DEFAULT_OPTIONS);
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this._setSize();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._mapEl = (/** @type {?} */ (this._elementRef.nativeElement.querySelector('.map-container')));
        this._setSize();
        /** @type {?} */
        const combinedOptionsChanges = this._combineOptions();
        this._googleMapChanges = this._initializeMap(combinedOptionsChanges);
        this._googleMapChanges.subscribe((/**
         * @param {?} googleMap
         * @return {?}
         */
        (googleMap) => {
            this._googleMap = (/** @type {?} */ (googleMap));
            this._initializeEventHandlers();
        }));
        this._watchForOptionsChanges();
        this._watchForCenterChanges();
        this._watchForZoomChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
        for (let listener of this._listeners) {
            listener.remove();
        }
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.fitBounds
     * @param {?} bounds
     * @param {?=} padding
     * @return {?}
     */
    fitBounds(bounds, padding) {
        this._googleMap.fitBounds(bounds, padding);
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panBy
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    panBy(x, y) {
        this._googleMap.panBy(x, y);
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panTo
     * @param {?} latLng
     * @return {?}
     */
    panTo(latLng) {
        this._googleMap.panTo(latLng);
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panToBounds
     * @param {?} latLngBounds
     * @param {?=} padding
     * @return {?}
     */
    panToBounds(latLngBounds, padding) {
        this._googleMap.panToBounds(latLngBounds, padding);
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds
     * @return {?}
     */
    getBounds() {
        return this._googleMap.getBounds() || null;
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getCenter
     * @return {?}
     */
    getCenter() {
        return this._googleMap.getCenter();
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getClickableIcons
     * @return {?}
     */
    getClickableIcons() {
        return this._googleMap.getClickableIcons();
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getHeading
     * @return {?}
     */
    getHeading() {
        return this._googleMap.getHeading();
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getMapTypeId
     * @return {?}
     */
    getMapTypeId() {
        return this._googleMap.getMapTypeId();
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getProjection
     * @return {?}
     */
    getProjection() {
        return this._googleMap.getProjection();
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getStreetView
     * @return {?}
     */
    getStreetView() {
        return this._googleMap.getStreetView();
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getTilt
     * @return {?}
     */
    getTilt() {
        return this._googleMap.getTilt();
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getZoom
     * @return {?}
     */
    getZoom() {
        return this._googleMap.getZoom();
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.controls
     * @return {?}
     */
    get controls() {
        return this._googleMap.controls;
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.data
     * @return {?}
     */
    get data() {
        return this._googleMap.data;
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mapTypes
     * @return {?}
     */
    get mapTypes() {
        return this._googleMap.mapTypes;
    }
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.overlayMapTypes
     * @return {?}
     */
    get overlayMapTypes() {
        return this._googleMap.overlayMapTypes;
    }
    /**
     * @private
     * @return {?}
     */
    _setSize() {
        if (this._mapEl) {
            this._mapEl.style.height = this.height || DEFAULT_HEIGHT;
            this._mapEl.style.width = this.width || DEFAULT_WIDTH;
        }
    }
    /**
     * Combines the center and zoom and the other map options into a single object
     * @private
     * @return {?}
     */
    _combineOptions() {
        return combineLatest([this._options, this._center, this._zoom])
            .pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([options, center, zoom]) => {
            /** @type {?} */
            const combinedOptions = Object.assign(Object.assign({}, options), { center: center || options.center, zoom: zoom !== undefined ? zoom : options.zoom });
            return combinedOptions;
        })));
    }
    /**
     * @private
     * @param {?} optionsChanges
     * @return {?}
     */
    _initializeMap(optionsChanges) {
        return optionsChanges.pipe(take(1), map((/**
         * @param {?} options
         * @return {?}
         */
        options => {
            return new google.maps.Map(this._mapEl, options);
        })), shareReplay(1));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForOptionsChanges() {
        combineLatest([this._googleMapChanges, this._options])
            .pipe(takeUntil(this._destroy))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([googleMap, options]) => {
            googleMap.setOptions(options);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForCenterChanges() {
        combineLatest([this._googleMapChanges, this._center])
            .pipe(takeUntil(this._destroy))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([googleMap, center]) => {
            if (center) {
                googleMap.setCenter(center);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForZoomChanges() {
        combineLatest([this._googleMapChanges, this._zoom])
            .pipe(takeUntil(this._destroy))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([googleMap, zoom]) => {
            if (zoom !== undefined) {
                googleMap.setZoom(zoom);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _initializeEventHandlers() {
        /** @type {?} */
        const eventHandlers = new Map([
            ['bounds_changed', this.boundsChanged],
            ['center_changed', this.centerChanged],
            ['drag', this.mapDrag],
            ['dragend', this.mapDragend],
            ['dragstart', this.mapDragstart],
            ['heading_changed', this.headingChanged],
            ['idle', this.idle],
            ['maptypeid_changed', this.maptypeidChanged],
            ['projection_changed', this.projectionChanged],
            ['tilesloaded', this.tilesloaded],
            ['tilt_changed', this.tiltChanged],
            ['zoomChanged', this.zoomChanged],
        ]);
        /** @type {?} */
        const mouseEventHandlers = new Map([
            ['dblclick', this.mapDblclick],
            ['mousemove', this.mapMousemove],
            ['mouseout', this.mapMouseout],
            ['mouseover', this.mapMouseover],
            ['rightclick', this.mapRightclick],
        ]);
        eventHandlers.forEach((/**
         * @param {?} eventHandler
         * @param {?} name
         * @return {?}
         */
        (eventHandler, name) => {
            if (eventHandler.observers.length > 0) {
                this._listeners.push(this._googleMap.addListener(name, (/**
                 * @return {?}
                 */
                () => {
                    eventHandler.emit();
                })));
            }
        }));
        mouseEventHandlers.forEach((/**
         * @param {?} eventHandler
         * @param {?} name
         * @return {?}
         */
        (eventHandler, name) => {
            if (eventHandler.observers.length > 0) {
                this._listeners.push(this._googleMap.addListener(name, (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    eventHandler.emit(event);
                })));
            }
        }));
        if (this.mapClick.observers.length > 0) {
            this._listeners.push(this._googleMap.addListener('click', (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                this.mapClick.emit(event);
            })));
        }
    }
}
GoogleMap.decorators = [
    { type: Component, args: [{
                moduleId: module.id,
                selector: 'google-map',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<div class="map-container"></div><ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
GoogleMap.ctorParameters = () => [
    { type: ElementRef }
];
GoogleMap.propDecorators = {
    height: [{ type: Input }],
    width: [{ type: Input }],
    center: [{ type: Input }],
    zoom: [{ type: Input }],
    options: [{ type: Input }],
    boundsChanged: [{ type: Output }],
    centerChanged: [{ type: Output }],
    mapClick: [{ type: Output }],
    mapDblclick: [{ type: Output }],
    mapDrag: [{ type: Output }],
    mapDragend: [{ type: Output }],
    mapDragstart: [{ type: Output }],
    headingChanged: [{ type: Output }],
    idle: [{ type: Output }],
    maptypeidChanged: [{ type: Output }],
    mapMousemove: [{ type: Output }],
    mapMouseout: [{ type: Output }],
    mapMouseover: [{ type: Output }],
    projectionChanged: [{ type: Output }],
    mapRightclick: [{ type: Output }],
    tilesloaded: [{ type: Output }],
    tiltChanged: [{ type: Output }],
    zoomChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    GoogleMap.prototype.height;
    /** @type {?} */
    GoogleMap.prototype.width;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed
     * @type {?}
     */
    GoogleMap.prototype.boundsChanged;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed
     * @type {?}
     */
    GoogleMap.prototype.centerChanged;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click
     * @type {?}
     */
    GoogleMap.prototype.mapClick;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick
     * @type {?}
     */
    GoogleMap.prototype.mapDblclick;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag
     * @type {?}
     */
    GoogleMap.prototype.mapDrag;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend
     * @type {?}
     */
    GoogleMap.prototype.mapDragend;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart
     * @type {?}
     */
    GoogleMap.prototype.mapDragstart;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed
     * @type {?}
     */
    GoogleMap.prototype.headingChanged;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle
     * @type {?}
     */
    GoogleMap.prototype.idle;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed
     * @type {?}
     */
    GoogleMap.prototype.maptypeidChanged;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove
     * @type {?}
     */
    GoogleMap.prototype.mapMousemove;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout
     * @type {?}
     */
    GoogleMap.prototype.mapMouseout;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover
     * @type {?}
     */
    GoogleMap.prototype.mapMouseover;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed
     * @type {?}
     */
    GoogleMap.prototype.projectionChanged;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick
     * @type {?}
     */
    GoogleMap.prototype.mapRightclick;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded
     * @type {?}
     */
    GoogleMap.prototype.tilesloaded;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed
     * @type {?}
     */
    GoogleMap.prototype.tiltChanged;
    /**
     * See
     * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed
     * @type {?}
     */
    GoogleMap.prototype.zoomChanged;
    /**
     * @type {?}
     * @private
     */
    GoogleMap.prototype._mapEl;
    /** @type {?} */
    GoogleMap.prototype._googleMap;
    /**
     * @type {?}
     * @private
     */
    GoogleMap.prototype._googleMapChanges;
    /**
     * @type {?}
     * @private
     */
    GoogleMap.prototype._listeners;
    /**
     * @type {?}
     * @private
     */
    GoogleMap.prototype._options;
    /**
     * @type {?}
     * @private
     */
    GoogleMap.prototype._center;
    /**
     * @type {?}
     * @private
     */
    GoogleMap.prototype._zoom;
    /**
     * @type {?}
     * @private
     */
    GoogleMap.prototype._destroy;
    /**
     * @type {?}
     * @private
     */
    GoogleMap.prototype._elementRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Default options for the Google Maps marker component. Displays a marker
 * at the Googleplex.
 * @type {?}
 */
const DEFAULT_MARKER_OPTIONS = {
    position: { lat: 37.421995, lng: -122.084092 },
};
/**
 * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.
 * @see developers.google.com/maps/documentation/javascript/reference/marker
 */
class MapMarker {
    /**
     * @param {?} googleMap
     */
    constructor(googleMap) {
        this.googleMap = googleMap;
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed
         */
        this.animationChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click
         */
        this.mapClick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed
         */
        this.clickableChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed
         */
        this.cursorChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick
         */
        this.mapDblclick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag
         */
        this.mapDrag = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend
         */
        this.mapDragend = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed
         */
        this.draggableChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart
         */
        this.mapDragstart = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed
         */
        this.flatChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed
         */
        this.iconChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown
         */
        this.mapMousedown = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout
         */
        this.mapMouseout = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover
         */
        this.mapMouseover = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup
         */
        this.mapMouseup = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed
         */
        this.positionChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick
         */
        this.mapRightclick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed
         */
        this.shapeChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed
         */
        this.titleChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed
         */
        this.visibleChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed
         */
        this.zindexChanged = new EventEmitter();
        this._options = new BehaviorSubject(DEFAULT_MARKER_OPTIONS);
        this._title = new BehaviorSubject(undefined);
        this._position = new BehaviorSubject(undefined);
        this._label = new BehaviorSubject(undefined);
        this._clickable = new BehaviorSubject(undefined);
        this._destroy = new Subject();
        this._listeners = [];
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options.next(options || DEFAULT_MARKER_OPTIONS);
    }
    /**
     * @param {?} title
     * @return {?}
     */
    set title(title) {
        this._title.next(title);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    set position(position) {
        this._position.next(position);
    }
    /**
     * @param {?} label
     * @return {?}
     */
    set label(label) {
        this._label.next(label);
    }
    /**
     * @param {?} clickable
     * @return {?}
     */
    set clickable(clickable) {
        this._clickable.next(clickable);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const combinedOptionsChanges = this._combineOptions();
        combinedOptionsChanges.pipe(take(1)).subscribe((/**
         * @param {?} options
         * @return {?}
         */
        options => {
            this._marker = new google.maps.Marker(options);
            this._marker.setMap(this.googleMap._googleMap);
            this._initializeEventHandlers();
        }));
        this._watchForOptionsChanges();
        this._watchForTitleChanges();
        this._watchForPositionChanges();
        this._watchForLabelChanges();
        this._watchForClickableChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
        for (let listener of this._listeners) {
            listener.remove();
        }
        if (this._marker) {
            this._marker.setMap(null);
        }
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation
     * @return {?}
     */
    getAnimation() {
        return (/** @type {?} */ (this._marker)).getAnimation() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable
     * @return {?}
     */
    getClickable() {
        return (/** @type {?} */ (this._marker)).getClickable();
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor
     * @return {?}
     */
    getCursor() {
        return (/** @type {?} */ (this._marker)).getCursor() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable
     * @return {?}
     */
    getDraggable() {
        return !!(/** @type {?} */ (this._marker)).getDraggable();
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon
     * @return {?}
     */
    getIcon() {
        return (/** @type {?} */ (this._marker)).getIcon() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel
     * @return {?}
     */
    getLabel() {
        return (/** @type {?} */ (this._marker)).getLabel() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity
     * @return {?}
     */
    getOpacity() {
        return (/** @type {?} */ (this._marker)).getOpacity() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition
     * @return {?}
     */
    getPosition() {
        return (/** @type {?} */ (this._marker)).getPosition() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape
     * @return {?}
     */
    getShape() {
        return (/** @type {?} */ (this._marker)).getShape() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle
     * @return {?}
     */
    getTitle() {
        return (/** @type {?} */ (this._marker)).getTitle() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible
     * @return {?}
     */
    getVisible() {
        return (/** @type {?} */ (this._marker)).getVisible();
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex
     * @return {?}
     */
    getZIndex() {
        return (/** @type {?} */ (this._marker)).getZIndex() || null;
    }
    /**
     * @private
     * @return {?}
     */
    _combineOptions() {
        return combineLatest([this._options, this._title, this._position, this._label, this._clickable])
            .pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([options, title, position, label, clickable]) => {
            /** @type {?} */
            const combinedOptions = Object.assign(Object.assign({}, options), { title: title || options.title, position: position || options.position, label: label || options.label, clickable: clickable !== undefined ? clickable : options.clickable, map: this.googleMap._googleMap || null });
            return combinedOptions;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForOptionsChanges() {
        this._options.pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} options
         * @return {?}
         */
        options => {
            if (this._marker) {
                this._marker.setOptions(options);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForTitleChanges() {
        this._title.pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} title
         * @return {?}
         */
        title => {
            if (this._marker && title !== undefined) {
                this._marker.setTitle(title);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForPositionChanges() {
        this._position.pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} position
         * @return {?}
         */
        position => {
            if (this._marker && position) {
                this._marker.setPosition(position);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForLabelChanges() {
        this._label.pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} label
         * @return {?}
         */
        label => {
            if (this._marker && label !== undefined) {
                this._marker.setLabel(label);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForClickableChanges() {
        this._clickable.pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} clickable
         * @return {?}
         */
        clickable => {
            if (this._marker && clickable !== undefined) {
                this._marker.setClickable(clickable);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _initializeEventHandlers() {
        /** @type {?} */
        const eventHandlers = new Map([
            ['animation_changed', this.animationChanged],
            ['clickable_changed', this.clickableChanged],
            ['cursor_changed', this.cursorChanged],
            ['draggable_changed', this.draggableChanged],
            ['flat_changed', this.flatChanged],
            ['icon_changed', this.iconChanged],
            ['position_changed', this.positionChanged],
            ['shape_changed', this.shapeChanged],
            ['title_changed', this.titleChanged],
            ['visible_changed', this.visibleChanged],
            ['zindex_changed', this.zindexChanged],
        ]);
        /** @type {?} */
        const mouseEventHandlers = new Map([
            ['click', this.mapClick],
            ['dblclick', this.mapDblclick],
            ['drag', this.mapDrag],
            ['dragend', this.mapDragend],
            ['dragstart', this.mapDragstart],
            ['mousedown', this.mapMousedown],
            ['mouseout', this.mapMouseout],
            ['mouseover', this.mapMouseover],
            ['mouseup', this.mapMouseup],
            ['rightclick', this.mapRightclick],
        ]);
        eventHandlers.forEach((/**
         * @param {?} eventHandler
         * @param {?} name
         * @return {?}
         */
        (eventHandler, name) => {
            if (eventHandler.observers.length > 0) {
                this._listeners.push((/** @type {?} */ (this._marker)).addListener(name, (/**
                 * @return {?}
                 */
                () => {
                    eventHandler.emit();
                })));
            }
        }));
        mouseEventHandlers.forEach((/**
         * @param {?} eventHandler
         * @param {?} name
         * @return {?}
         */
        (eventHandler, name) => {
            if (eventHandler.observers.length > 0) {
                this._listeners.push((/** @type {?} */ (this._marker)).addListener(name, (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    eventHandler.emit(event);
                })));
            }
        }));
    }
}
MapMarker.decorators = [
    { type: Component, args: [{
                moduleId: module.id,
                selector: 'map-marker',
                template: '<ng-content></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
MapMarker.ctorParameters = () => [
    { type: GoogleMap }
];
MapMarker.propDecorators = {
    options: [{ type: Input }],
    title: [{ type: Input }],
    position: [{ type: Input }],
    label: [{ type: Input }],
    clickable: [{ type: Input }],
    animationChanged: [{ type: Output }],
    mapClick: [{ type: Output }],
    clickableChanged: [{ type: Output }],
    cursorChanged: [{ type: Output }],
    mapDblclick: [{ type: Output }],
    mapDrag: [{ type: Output }],
    mapDragend: [{ type: Output }],
    draggableChanged: [{ type: Output }],
    mapDragstart: [{ type: Output }],
    flatChanged: [{ type: Output }],
    iconChanged: [{ type: Output }],
    mapMousedown: [{ type: Output }],
    mapMouseout: [{ type: Output }],
    mapMouseover: [{ type: Output }],
    mapMouseup: [{ type: Output }],
    positionChanged: [{ type: Output }],
    mapRightclick: [{ type: Output }],
    shapeChanged: [{ type: Output }],
    titleChanged: [{ type: Output }],
    visibleChanged: [{ type: Output }],
    zindexChanged: [{ type: Output }]
};
if (false) {
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed
     * @type {?}
     */
    MapMarker.prototype.animationChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click
     * @type {?}
     */
    MapMarker.prototype.mapClick;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed
     * @type {?}
     */
    MapMarker.prototype.clickableChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed
     * @type {?}
     */
    MapMarker.prototype.cursorChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick
     * @type {?}
     */
    MapMarker.prototype.mapDblclick;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag
     * @type {?}
     */
    MapMarker.prototype.mapDrag;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend
     * @type {?}
     */
    MapMarker.prototype.mapDragend;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed
     * @type {?}
     */
    MapMarker.prototype.draggableChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart
     * @type {?}
     */
    MapMarker.prototype.mapDragstart;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed
     * @type {?}
     */
    MapMarker.prototype.flatChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed
     * @type {?}
     */
    MapMarker.prototype.iconChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown
     * @type {?}
     */
    MapMarker.prototype.mapMousedown;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout
     * @type {?}
     */
    MapMarker.prototype.mapMouseout;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover
     * @type {?}
     */
    MapMarker.prototype.mapMouseover;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup
     * @type {?}
     */
    MapMarker.prototype.mapMouseup;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed
     * @type {?}
     */
    MapMarker.prototype.positionChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick
     * @type {?}
     */
    MapMarker.prototype.mapRightclick;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed
     * @type {?}
     */
    MapMarker.prototype.shapeChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed
     * @type {?}
     */
    MapMarker.prototype.titleChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed
     * @type {?}
     */
    MapMarker.prototype.visibleChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed
     * @type {?}
     */
    MapMarker.prototype.zindexChanged;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._options;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._title;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._position;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._label;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._clickable;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._destroy;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._listeners;
    /** @type {?} */
    MapMarker.prototype._marker;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype.googleMap;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Angular component that renders a Google Maps info window via the Google Maps JavaScript API.
 * @see developers.google.com/maps/documentation/javascript/reference/info-window
 */
class MapInfoWindow {
    /**
     * @param {?} googleMap
     * @param {?} _elementRef
     */
    constructor(googleMap, _elementRef) {
        this.googleMap = googleMap;
        this._elementRef = _elementRef;
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick
         */
        this.closeclick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window
         * #InfoWindow.content_changed
         */
        this.contentChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready
         */
        this.domready = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window
         * #InfoWindow.position_changed
         */
        this.positionChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window
         * #InfoWindow.zindex_changed
         */
        this.zindexChanged = new EventEmitter();
        this._options = new BehaviorSubject({});
        this._position = new BehaviorSubject(undefined);
        this._listeners = [];
        this._destroy = new Subject();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options.next(options || {});
    }
    /**
     * @param {?} position
     * @return {?}
     */
    set position(position) {
        this._position.next(position);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._combineOptions().pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} options
         * @return {?}
         */
        options => {
            if (this._infoWindow) {
                this._infoWindow.setOptions(options);
            }
            else {
                this._infoWindow = new google.maps.InfoWindow(options);
                this._initializeEventHandlers();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
        for (let listener of this._listeners) {
            listener.remove();
        }
        this.close();
    }
    /**
     * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close
     * @return {?}
     */
    close() {
        if (this._infoWindow) {
            this._infoWindow.close();
        }
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent
     * @return {?}
     */
    getContent() {
        return (/** @type {?} */ (this._infoWindow)).getContent();
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window
     * #InfoWindow.getPosition
     * @return {?}
     */
    getPosition() {
        return (/** @type {?} */ (this._infoWindow)).getPosition() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex
     * @return {?}
     */
    getZIndex() {
        return (/** @type {?} */ (this._infoWindow)).getZIndex();
    }
    /**
     * Opens the MapInfoWindow using the provided MapMarker as the anchor. If the anchor is not set,
     * then the position property of the options input is used instead.
     * @param {?=} anchor
     * @return {?}
     */
    open(anchor) {
        /** @type {?} */
        const marker = anchor ? anchor._marker : undefined;
        if (this.googleMap._googleMap) {
            this._elementRef.nativeElement.style.display = '';
            (/** @type {?} */ (this._infoWindow)).open(this.googleMap._googleMap, marker);
        }
    }
    /**
     * @private
     * @return {?}
     */
    _combineOptions() {
        return combineLatest([this._options, this._position]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([options, position]) => {
            /** @type {?} */
            const combinedOptions = Object.assign(Object.assign({}, options), { position: position || options.position, content: this._elementRef.nativeElement });
            return combinedOptions;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    _initializeEventHandlers() {
        /** @type {?} */
        const eventHandlers = new Map([
            ['closeclick', this.closeclick],
            ['content_changed', this.contentChanged],
            ['domready', this.domready],
            ['position_changed', this.positionChanged],
            ['zindex_changed', this.zindexChanged],
        ]);
        eventHandlers.forEach((/**
         * @param {?} eventHandler
         * @param {?} name
         * @return {?}
         */
        (eventHandler, name) => {
            if (eventHandler.observers.length > 0) {
                this._listeners.push((/** @type {?} */ (this._infoWindow)).addListener(name, (/**
                 * @return {?}
                 */
                () => {
                    eventHandler.emit();
                })));
            }
        }));
    }
}
MapInfoWindow.decorators = [
    { type: Directive, args: [{
                selector: 'map-info-window',
                host: { 'style': 'display: none' },
            },] }
];
/** @nocollapse */
MapInfoWindow.ctorParameters = () => [
    { type: GoogleMap },
    { type: ElementRef }
];
MapInfoWindow.propDecorators = {
    options: [{ type: Input }],
    position: [{ type: Input }],
    closeclick: [{ type: Output }],
    contentChanged: [{ type: Output }],
    domready: [{ type: Output }],
    positionChanged: [{ type: Output }],
    zindexChanged: [{ type: Output }]
};
if (false) {
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick
     * @type {?}
     */
    MapInfoWindow.prototype.closeclick;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window
     * #InfoWindow.content_changed
     * @type {?}
     */
    MapInfoWindow.prototype.contentChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready
     * @type {?}
     */
    MapInfoWindow.prototype.domready;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window
     * #InfoWindow.position_changed
     * @type {?}
     */
    MapInfoWindow.prototype.positionChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window
     * #InfoWindow.zindex_changed
     * @type {?}
     */
    MapInfoWindow.prototype.zindexChanged;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._options;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._position;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._listeners;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._destroy;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._infoWindow;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype.googleMap;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._elementRef;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const COMPONENTS = [
    GoogleMap,
    MapInfoWindow,
    MapMarker,
];
class GoogleMapsModule {
}
GoogleMapsModule.decorators = [
    { type: NgModule, args: [{
                declarations: COMPONENTS,
                exports: COMPONENTS,
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * Generated bundle index. Do not edit.
 */

export { GoogleMap, MapMarker, GoogleMapsModule, MapInfoWindow };
//# sourceMappingURL=google-maps.js.map
