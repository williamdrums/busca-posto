/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { __assign, __read, __values } from "tslib";
// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265
/// <reference types="googlemaps" />
import { Directive, ElementRef, EventEmitter, Input, Output, } from '@angular/core';
import { BehaviorSubject, combineLatest, Subject } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import { GoogleMap } from '../google-map/google-map';
/**
 * Angular component that renders a Google Maps info window via the Google Maps JavaScript API.
 * @see developers.google.com/maps/documentation/javascript/reference/info-window
 */
var MapInfoWindow = /** @class */ (function () {
    function MapInfoWindow(googleMap, _elementRef) {
        this.googleMap = googleMap;
        this._elementRef = _elementRef;
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick
         */
        this.closeclick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window
         * #InfoWindow.content_changed
         */
        this.contentChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready
         */
        this.domready = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window
         * #InfoWindow.position_changed
         */
        this.positionChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window
         * #InfoWindow.zindex_changed
         */
        this.zindexChanged = new EventEmitter();
        this._options = new BehaviorSubject({});
        this._position = new BehaviorSubject(undefined);
        this._listeners = [];
        this._destroy = new Subject();
    }
    Object.defineProperty(MapInfoWindow.prototype, "options", {
        set: function (options) {
            this._options.next(options || {});
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapInfoWindow.prototype, "position", {
        set: function (position) {
            this._position.next(position);
        },
        enumerable: true,
        configurable: true
    });
    MapInfoWindow.prototype.ngOnInit = function () {
        var _this = this;
        this._combineOptions().pipe(takeUntil(this._destroy)).subscribe(function (options) {
            if (_this._infoWindow) {
                _this._infoWindow.setOptions(options);
            }
            else {
                _this._infoWindow = new google.maps.InfoWindow(options);
                _this._initializeEventHandlers();
            }
        });
    };
    MapInfoWindow.prototype.ngOnDestroy = function () {
        var e_1, _a;
        this._destroy.next();
        this._destroy.complete();
        try {
            for (var _b = __values(this._listeners), _c = _b.next(); !_c.done; _c = _b.next()) {
                var listener = _c.value;
                listener.remove();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.close();
    };
    /**
     * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close
     */
    MapInfoWindow.prototype.close = function () {
        if (this._infoWindow) {
            this._infoWindow.close();
        }
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent
     */
    MapInfoWindow.prototype.getContent = function () {
        return this._infoWindow.getContent();
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window
     * #InfoWindow.getPosition
     */
    MapInfoWindow.prototype.getPosition = function () {
        return this._infoWindow.getPosition() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex
     */
    MapInfoWindow.prototype.getZIndex = function () {
        return this._infoWindow.getZIndex();
    };
    /**
     * Opens the MapInfoWindow using the provided MapMarker as the anchor. If the anchor is not set,
     * then the position property of the options input is used instead.
     */
    MapInfoWindow.prototype.open = function (anchor) {
        var marker = anchor ? anchor._marker : undefined;
        if (this.googleMap._googleMap) {
            this._elementRef.nativeElement.style.display = '';
            this._infoWindow.open(this.googleMap._googleMap, marker);
        }
    };
    MapInfoWindow.prototype._combineOptions = function () {
        var _this = this;
        return combineLatest([this._options, this._position]).pipe(map(function (_a) {
            var _b = __read(_a, 2), options = _b[0], position = _b[1];
            var combinedOptions = __assign(__assign({}, options), { position: position || options.position, content: _this._elementRef.nativeElement });
            return combinedOptions;
        }));
    };
    MapInfoWindow.prototype._initializeEventHandlers = function () {
        var _this = this;
        var eventHandlers = new Map([
            ['closeclick', this.closeclick],
            ['content_changed', this.contentChanged],
            ['domready', this.domready],
            ['position_changed', this.positionChanged],
            ['zindex_changed', this.zindexChanged],
        ]);
        eventHandlers.forEach(function (eventHandler, name) {
            if (eventHandler.observers.length > 0) {
                _this._listeners.push(_this._infoWindow.addListener(name, function () {
                    eventHandler.emit();
                }));
            }
        });
    };
    MapInfoWindow.decorators = [
        { type: Directive, args: [{
                    selector: 'map-info-window',
                    host: { 'style': 'display: none' },
                },] }
    ];
    /** @nocollapse */
    MapInfoWindow.ctorParameters = function () { return [
        { type: GoogleMap },
        { type: ElementRef }
    ]; };
    MapInfoWindow.propDecorators = {
        options: [{ type: Input }],
        position: [{ type: Input }],
        closeclick: [{ type: Output }],
        contentChanged: [{ type: Output }],
        domready: [{ type: Output }],
        positionChanged: [{ type: Output }],
        zindexChanged: [{ type: Output }]
    };
    return MapInfoWindow;
}());
export { MapInfoWindow };
//# sourceMappingURL=data:application/json;base64,