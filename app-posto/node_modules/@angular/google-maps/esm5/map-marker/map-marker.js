/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { __assign, __read, __values } from "tslib";
// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265
/// <reference types="googlemaps" />
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject, combineLatest, Subject } from 'rxjs';
import { map, take, takeUntil } from 'rxjs/operators';
import { GoogleMap } from '../google-map/google-map';
/**
 * Default options for the Google Maps marker component. Displays a marker
 * at the Googleplex.
 */
export var DEFAULT_MARKER_OPTIONS = {
    position: { lat: 37.421995, lng: -122.084092 },
};
/**
 * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.
 * @see developers.google.com/maps/documentation/javascript/reference/marker
 */
var MapMarker = /** @class */ (function () {
    function MapMarker(googleMap) {
        this.googleMap = googleMap;
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed
         */
        this.animationChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click
         */
        this.mapClick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed
         */
        this.clickableChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed
         */
        this.cursorChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick
         */
        this.mapDblclick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag
         */
        this.mapDrag = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend
         */
        this.mapDragend = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed
         */
        this.draggableChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart
         */
        this.mapDragstart = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed
         */
        this.flatChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed
         */
        this.iconChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown
         */
        this.mapMousedown = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout
         */
        this.mapMouseout = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover
         */
        this.mapMouseover = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup
         */
        this.mapMouseup = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed
         */
        this.positionChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick
         */
        this.mapRightclick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed
         */
        this.shapeChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed
         */
        this.titleChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed
         */
        this.visibleChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed
         */
        this.zindexChanged = new EventEmitter();
        this._options = new BehaviorSubject(DEFAULT_MARKER_OPTIONS);
        this._title = new BehaviorSubject(undefined);
        this._position = new BehaviorSubject(undefined);
        this._label = new BehaviorSubject(undefined);
        this._clickable = new BehaviorSubject(undefined);
        this._destroy = new Subject();
        this._listeners = [];
    }
    Object.defineProperty(MapMarker.prototype, "options", {
        set: function (options) {
            this._options.next(options || DEFAULT_MARKER_OPTIONS);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapMarker.prototype, "title", {
        set: function (title) {
            this._title.next(title);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapMarker.prototype, "position", {
        set: function (position) {
            this._position.next(position);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapMarker.prototype, "label", {
        set: function (label) {
            this._label.next(label);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapMarker.prototype, "clickable", {
        set: function (clickable) {
            this._clickable.next(clickable);
        },
        enumerable: true,
        configurable: true
    });
    MapMarker.prototype.ngOnInit = function () {
        var _this = this;
        var combinedOptionsChanges = this._combineOptions();
        combinedOptionsChanges.pipe(take(1)).subscribe(function (options) {
            _this._marker = new google.maps.Marker(options);
            _this._marker.setMap(_this.googleMap._googleMap);
            _this._initializeEventHandlers();
        });
        this._watchForOptionsChanges();
        this._watchForTitleChanges();
        this._watchForPositionChanges();
        this._watchForLabelChanges();
        this._watchForClickableChanges();
    };
    MapMarker.prototype.ngOnDestroy = function () {
        var e_1, _a;
        this._destroy.next();
        this._destroy.complete();
        try {
            for (var _b = __values(this._listeners), _c = _b.next(); !_c.done; _c = _b.next()) {
                var listener = _c.value;
                listener.remove();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (this._marker) {
            this._marker.setMap(null);
        }
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation
     */
    MapMarker.prototype.getAnimation = function () {
        return this._marker.getAnimation() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable
     */
    MapMarker.prototype.getClickable = function () {
        return this._marker.getClickable();
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor
     */
    MapMarker.prototype.getCursor = function () {
        return this._marker.getCursor() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable
     */
    MapMarker.prototype.getDraggable = function () {
        return !!this._marker.getDraggable();
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon
     */
    MapMarker.prototype.getIcon = function () {
        return this._marker.getIcon() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel
     */
    MapMarker.prototype.getLabel = function () {
        return this._marker.getLabel() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity
     */
    MapMarker.prototype.getOpacity = function () {
        return this._marker.getOpacity() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition
     */
    MapMarker.prototype.getPosition = function () {
        return this._marker.getPosition() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape
     */
    MapMarker.prototype.getShape = function () {
        return this._marker.getShape() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle
     */
    MapMarker.prototype.getTitle = function () {
        return this._marker.getTitle() || null;
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible
     */
    MapMarker.prototype.getVisible = function () {
        return this._marker.getVisible();
    };
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex
     */
    MapMarker.prototype.getZIndex = function () {
        return this._marker.getZIndex() || null;
    };
    MapMarker.prototype._combineOptions = function () {
        var _this = this;
        return combineLatest([this._options, this._title, this._position, this._label, this._clickable])
            .pipe(map(function (_a) {
            var _b = __read(_a, 5), options = _b[0], title = _b[1], position = _b[2], label = _b[3], clickable = _b[4];
            var combinedOptions = __assign(__assign({}, options), { title: title || options.title, position: position || options.position, label: label || options.label, clickable: clickable !== undefined ? clickable : options.clickable, map: _this.googleMap._googleMap || null });
            return combinedOptions;
        }));
    };
    MapMarker.prototype._watchForOptionsChanges = function () {
        var _this = this;
        this._options.pipe(takeUntil(this._destroy)).subscribe(function (options) {
            if (_this._marker) {
                _this._marker.setOptions(options);
            }
        });
    };
    MapMarker.prototype._watchForTitleChanges = function () {
        var _this = this;
        this._title.pipe(takeUntil(this._destroy)).subscribe(function (title) {
            if (_this._marker && title !== undefined) {
                _this._marker.setTitle(title);
            }
        });
    };
    MapMarker.prototype._watchForPositionChanges = function () {
        var _this = this;
        this._position.pipe(takeUntil(this._destroy)).subscribe(function (position) {
            if (_this._marker && position) {
                _this._marker.setPosition(position);
            }
        });
    };
    MapMarker.prototype._watchForLabelChanges = function () {
        var _this = this;
        this._label.pipe(takeUntil(this._destroy)).subscribe(function (label) {
            if (_this._marker && label !== undefined) {
                _this._marker.setLabel(label);
            }
        });
    };
    MapMarker.prototype._watchForClickableChanges = function () {
        var _this = this;
        this._clickable.pipe(takeUntil(this._destroy)).subscribe(function (clickable) {
            if (_this._marker && clickable !== undefined) {
                _this._marker.setClickable(clickable);
            }
        });
    };
    MapMarker.prototype._initializeEventHandlers = function () {
        var _this = this;
        var eventHandlers = new Map([
            ['animation_changed', this.animationChanged],
            ['clickable_changed', this.clickableChanged],
            ['cursor_changed', this.cursorChanged],
            ['draggable_changed', this.draggableChanged],
            ['flat_changed', this.flatChanged],
            ['icon_changed', this.iconChanged],
            ['position_changed', this.positionChanged],
            ['shape_changed', this.shapeChanged],
            ['title_changed', this.titleChanged],
            ['visible_changed', this.visibleChanged],
            ['zindex_changed', this.zindexChanged],
        ]);
        var mouseEventHandlers = new Map([
            ['click', this.mapClick],
            ['dblclick', this.mapDblclick],
            ['drag', this.mapDrag],
            ['dragend', this.mapDragend],
            ['dragstart', this.mapDragstart],
            ['mousedown', this.mapMousedown],
            ['mouseout', this.mapMouseout],
            ['mouseover', this.mapMouseover],
            ['mouseup', this.mapMouseup],
            ['rightclick', this.mapRightclick],
        ]);
        eventHandlers.forEach(function (eventHandler, name) {
            if (eventHandler.observers.length > 0) {
                _this._listeners.push(_this._marker.addListener(name, function () {
                    eventHandler.emit();
                }));
            }
        });
        mouseEventHandlers.forEach(function (eventHandler, name) {
            if (eventHandler.observers.length > 0) {
                _this._listeners.push(_this._marker.addListener(name, function (event) {
                    eventHandler.emit(event);
                }));
            }
        });
    };
    MapMarker.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'map-marker',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    MapMarker.ctorParameters = function () { return [
        { type: GoogleMap }
    ]; };
    MapMarker.propDecorators = {
        options: [{ type: Input }],
        title: [{ type: Input }],
        position: [{ type: Input }],
        label: [{ type: Input }],
        clickable: [{ type: Input }],
        animationChanged: [{ type: Output }],
        mapClick: [{ type: Output }],
        clickableChanged: [{ type: Output }],
        cursorChanged: [{ type: Output }],
        mapDblclick: [{ type: Output }],
        mapDrag: [{ type: Output }],
        mapDragend: [{ type: Output }],
        draggableChanged: [{ type: Output }],
        mapDragstart: [{ type: Output }],
        flatChanged: [{ type: Output }],
        iconChanged: [{ type: Output }],
        mapMousedown: [{ type: Output }],
        mapMouseout: [{ type: Output }],
        mapMouseover: [{ type: Output }],
        mapMouseup: [{ type: Output }],
        positionChanged: [{ type: Output }],
        mapRightclick: [{ type: Output }],
        shapeChanged: [{ type: Output }],
        titleChanged: [{ type: Output }],
        visibleChanged: [{ type: Output }],
        zindexChanged: [{ type: Output }]
    };
    return MapMarker;
}());
export { MapMarker };
//# sourceMappingURL=data:application/json;base64,