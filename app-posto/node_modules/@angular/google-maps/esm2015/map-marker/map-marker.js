/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/// <reference types="googlemaps" />
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265
/// <reference types="googlemaps" />
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject, combineLatest, Subject } from 'rxjs';
import { map, take, takeUntil } from 'rxjs/operators';
import { GoogleMap } from '../google-map/google-map';
/**
 * Default options for the Google Maps marker component. Displays a marker
 * at the Googleplex.
 * @type {?}
 */
export const DEFAULT_MARKER_OPTIONS = {
    position: { lat: 37.421995, lng: -122.084092 },
};
/**
 * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.
 * @see developers.google.com/maps/documentation/javascript/reference/marker
 */
export class MapMarker {
    /**
     * @param {?} googleMap
     */
    constructor(googleMap) {
        this.googleMap = googleMap;
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed
         */
        this.animationChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click
         */
        this.mapClick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed
         */
        this.clickableChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed
         */
        this.cursorChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick
         */
        this.mapDblclick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag
         */
        this.mapDrag = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend
         */
        this.mapDragend = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed
         */
        this.draggableChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart
         */
        this.mapDragstart = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed
         */
        this.flatChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed
         */
        this.iconChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown
         */
        this.mapMousedown = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout
         */
        this.mapMouseout = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover
         */
        this.mapMouseover = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup
         */
        this.mapMouseup = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed
         */
        this.positionChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick
         */
        this.mapRightclick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed
         */
        this.shapeChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed
         */
        this.titleChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed
         */
        this.visibleChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed
         */
        this.zindexChanged = new EventEmitter();
        this._options = new BehaviorSubject(DEFAULT_MARKER_OPTIONS);
        this._title = new BehaviorSubject(undefined);
        this._position = new BehaviorSubject(undefined);
        this._label = new BehaviorSubject(undefined);
        this._clickable = new BehaviorSubject(undefined);
        this._destroy = new Subject();
        this._listeners = [];
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options.next(options || DEFAULT_MARKER_OPTIONS);
    }
    /**
     * @param {?} title
     * @return {?}
     */
    set title(title) {
        this._title.next(title);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    set position(position) {
        this._position.next(position);
    }
    /**
     * @param {?} label
     * @return {?}
     */
    set label(label) {
        this._label.next(label);
    }
    /**
     * @param {?} clickable
     * @return {?}
     */
    set clickable(clickable) {
        this._clickable.next(clickable);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const combinedOptionsChanges = this._combineOptions();
        combinedOptionsChanges.pipe(take(1)).subscribe((/**
         * @param {?} options
         * @return {?}
         */
        options => {
            this._marker = new google.maps.Marker(options);
            this._marker.setMap(this.googleMap._googleMap);
            this._initializeEventHandlers();
        }));
        this._watchForOptionsChanges();
        this._watchForTitleChanges();
        this._watchForPositionChanges();
        this._watchForLabelChanges();
        this._watchForClickableChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
        for (let listener of this._listeners) {
            listener.remove();
        }
        if (this._marker) {
            this._marker.setMap(null);
        }
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation
     * @return {?}
     */
    getAnimation() {
        return (/** @type {?} */ (this._marker)).getAnimation() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable
     * @return {?}
     */
    getClickable() {
        return (/** @type {?} */ (this._marker)).getClickable();
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor
     * @return {?}
     */
    getCursor() {
        return (/** @type {?} */ (this._marker)).getCursor() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable
     * @return {?}
     */
    getDraggable() {
        return !!(/** @type {?} */ (this._marker)).getDraggable();
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon
     * @return {?}
     */
    getIcon() {
        return (/** @type {?} */ (this._marker)).getIcon() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel
     * @return {?}
     */
    getLabel() {
        return (/** @type {?} */ (this._marker)).getLabel() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity
     * @return {?}
     */
    getOpacity() {
        return (/** @type {?} */ (this._marker)).getOpacity() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition
     * @return {?}
     */
    getPosition() {
        return (/** @type {?} */ (this._marker)).getPosition() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape
     * @return {?}
     */
    getShape() {
        return (/** @type {?} */ (this._marker)).getShape() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle
     * @return {?}
     */
    getTitle() {
        return (/** @type {?} */ (this._marker)).getTitle() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible
     * @return {?}
     */
    getVisible() {
        return (/** @type {?} */ (this._marker)).getVisible();
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex
     * @return {?}
     */
    getZIndex() {
        return (/** @type {?} */ (this._marker)).getZIndex() || null;
    }
    /**
     * @private
     * @return {?}
     */
    _combineOptions() {
        return combineLatest([this._options, this._title, this._position, this._label, this._clickable])
            .pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([options, title, position, label, clickable]) => {
            /** @type {?} */
            const combinedOptions = Object.assign(Object.assign({}, options), { title: title || options.title, position: position || options.position, label: label || options.label, clickable: clickable !== undefined ? clickable : options.clickable, map: this.googleMap._googleMap || null });
            return combinedOptions;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForOptionsChanges() {
        this._options.pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} options
         * @return {?}
         */
        options => {
            if (this._marker) {
                this._marker.setOptions(options);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForTitleChanges() {
        this._title.pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} title
         * @return {?}
         */
        title => {
            if (this._marker && title !== undefined) {
                this._marker.setTitle(title);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForPositionChanges() {
        this._position.pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} position
         * @return {?}
         */
        position => {
            if (this._marker && position) {
                this._marker.setPosition(position);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForLabelChanges() {
        this._label.pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} label
         * @return {?}
         */
        label => {
            if (this._marker && label !== undefined) {
                this._marker.setLabel(label);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _watchForClickableChanges() {
        this._clickable.pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} clickable
         * @return {?}
         */
        clickable => {
            if (this._marker && clickable !== undefined) {
                this._marker.setClickable(clickable);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _initializeEventHandlers() {
        /** @type {?} */
        const eventHandlers = new Map([
            ['animation_changed', this.animationChanged],
            ['clickable_changed', this.clickableChanged],
            ['cursor_changed', this.cursorChanged],
            ['draggable_changed', this.draggableChanged],
            ['flat_changed', this.flatChanged],
            ['icon_changed', this.iconChanged],
            ['position_changed', this.positionChanged],
            ['shape_changed', this.shapeChanged],
            ['title_changed', this.titleChanged],
            ['visible_changed', this.visibleChanged],
            ['zindex_changed', this.zindexChanged],
        ]);
        /** @type {?} */
        const mouseEventHandlers = new Map([
            ['click', this.mapClick],
            ['dblclick', this.mapDblclick],
            ['drag', this.mapDrag],
            ['dragend', this.mapDragend],
            ['dragstart', this.mapDragstart],
            ['mousedown', this.mapMousedown],
            ['mouseout', this.mapMouseout],
            ['mouseover', this.mapMouseover],
            ['mouseup', this.mapMouseup],
            ['rightclick', this.mapRightclick],
        ]);
        eventHandlers.forEach((/**
         * @param {?} eventHandler
         * @param {?} name
         * @return {?}
         */
        (eventHandler, name) => {
            if (eventHandler.observers.length > 0) {
                this._listeners.push((/** @type {?} */ (this._marker)).addListener(name, (/**
                 * @return {?}
                 */
                () => {
                    eventHandler.emit();
                })));
            }
        }));
        mouseEventHandlers.forEach((/**
         * @param {?} eventHandler
         * @param {?} name
         * @return {?}
         */
        (eventHandler, name) => {
            if (eventHandler.observers.length > 0) {
                this._listeners.push((/** @type {?} */ (this._marker)).addListener(name, (/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    eventHandler.emit(event);
                })));
            }
        }));
    }
}
MapMarker.decorators = [
    { type: Component, args: [{
                moduleId: module.id,
                selector: 'map-marker',
                template: '<ng-content></ng-content>',
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
MapMarker.ctorParameters = () => [
    { type: GoogleMap }
];
MapMarker.propDecorators = {
    options: [{ type: Input }],
    title: [{ type: Input }],
    position: [{ type: Input }],
    label: [{ type: Input }],
    clickable: [{ type: Input }],
    animationChanged: [{ type: Output }],
    mapClick: [{ type: Output }],
    clickableChanged: [{ type: Output }],
    cursorChanged: [{ type: Output }],
    mapDblclick: [{ type: Output }],
    mapDrag: [{ type: Output }],
    mapDragend: [{ type: Output }],
    draggableChanged: [{ type: Output }],
    mapDragstart: [{ type: Output }],
    flatChanged: [{ type: Output }],
    iconChanged: [{ type: Output }],
    mapMousedown: [{ type: Output }],
    mapMouseout: [{ type: Output }],
    mapMouseover: [{ type: Output }],
    mapMouseup: [{ type: Output }],
    positionChanged: [{ type: Output }],
    mapRightclick: [{ type: Output }],
    shapeChanged: [{ type: Output }],
    titleChanged: [{ type: Output }],
    visibleChanged: [{ type: Output }],
    zindexChanged: [{ type: Output }]
};
if (false) {
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed
     * @type {?}
     */
    MapMarker.prototype.animationChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click
     * @type {?}
     */
    MapMarker.prototype.mapClick;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed
     * @type {?}
     */
    MapMarker.prototype.clickableChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed
     * @type {?}
     */
    MapMarker.prototype.cursorChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick
     * @type {?}
     */
    MapMarker.prototype.mapDblclick;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag
     * @type {?}
     */
    MapMarker.prototype.mapDrag;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend
     * @type {?}
     */
    MapMarker.prototype.mapDragend;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed
     * @type {?}
     */
    MapMarker.prototype.draggableChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart
     * @type {?}
     */
    MapMarker.prototype.mapDragstart;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed
     * @type {?}
     */
    MapMarker.prototype.flatChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed
     * @type {?}
     */
    MapMarker.prototype.iconChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown
     * @type {?}
     */
    MapMarker.prototype.mapMousedown;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout
     * @type {?}
     */
    MapMarker.prototype.mapMouseout;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover
     * @type {?}
     */
    MapMarker.prototype.mapMouseover;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup
     * @type {?}
     */
    MapMarker.prototype.mapMouseup;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed
     * @type {?}
     */
    MapMarker.prototype.positionChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick
     * @type {?}
     */
    MapMarker.prototype.mapRightclick;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed
     * @type {?}
     */
    MapMarker.prototype.shapeChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed
     * @type {?}
     */
    MapMarker.prototype.titleChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed
     * @type {?}
     */
    MapMarker.prototype.visibleChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed
     * @type {?}
     */
    MapMarker.prototype.zindexChanged;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._options;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._title;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._position;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._label;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._clickable;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._destroy;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype._listeners;
    /** @type {?} */
    MapMarker.prototype._marker;
    /**
     * @type {?}
     * @private
     */
    MapMarker.prototype.googleMap;
}
//# sourceMappingURL=data:application/json;base64,